name: BE CI / CD with Docker Compose

on:
  push:
    branches:
      - develop  # develop 브랜치 기준으로 실행
    paths:
      - 'backend/**'  # 백엔드 폴더 내부 파일이 변경될 때만 실행
  pull_request:
    branches:
      - develop
    paths:
      - 'backend/**'

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup application.yml
        run: |
          cd ./backend/src/main/resources
          
          touch application-actuator.yml
          touch application-config.yml
          touch application-jwt.yml
          touch application-swagger.yml
          touch application-oauth.yml
          touch application-db.yml
          
          echo "${{ secrets.APPLICATION_DB }}" >> ./application-db.yml
          echo "${{ secrets.APPLICATION_CONFIG }}" >> ./application-config.yml
          echo "${{ secrets.APPLICATION_JWT }}" >> ./application-jwt.yml
          echo "${{ secrets.APPLICATION_SWAGGER }}" >> ./application-swagger.yml
          echo "${{ secrets.APPLICATION_ACTUATOR }}" >> ./application-actuator.yml
          echo "${{ secrets.APPLICATION_OAUTH }}" >> ./application-oauth.yml
        shell: bash

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle Wrapper
        run: |
          cd backend
          ./gradlew clean build -x test

      - name: Docker Image Build
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/iambohyun:${{ github.sha }} .

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/iambohyun:${{ github.sha }}

  deploy-to-ec2:
    needs: build-docker-image
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}  # 개발 환경 EC2
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # deploy 디렉터리가 없으면 생성
            mkdir -p ~/deploy 
            cd ~/deploy
            
            # 기존 컨테이너 중지 및 제거 (docker-compose.yml이 있을 경우만)
            if [ -f "docker-compose.yml" ]; then
              sudo docker-compose down
            fi

            # 기존 docker-compose 중지 및 제거
            sudo docker-compose down || true

            # 최신 docker-compose.yml 다운로드 (필요하면 수정)
            curl -O https://raw.githubusercontent.com/${{ github.repository }}/develop/backend/docker-compose.yml

            # 최신 이미지 pull
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/iambohyun:${{ github.sha }}

            # docker-compose 실행
            sudo docker-compose up -d --force-recreate --remove-orphans

            # 불필요한 Docker 이미지 정리
            sudo docker image prune -f